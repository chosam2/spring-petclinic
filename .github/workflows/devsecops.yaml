name: DevSecOps Pipeline for Spring Petclinic
run-name: ${{ github.actor }} is running DevSecOps pipeline for Spring Petclinic

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-analyze:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle and Create Docker Image
        run: |
          ./gradlew bootBuildImage --imageName=chosam2/petclinic:${{ github.sha }}

      # - name: Download and install SonarScanner
      #   run: |
      #     wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
      #     unzip sonar-scanner-cli-4.6.2.2472-linux.zip
      #     echo "${PWD}/sonar-scanner-4.6.2.2472-linux/bin" >> $GITHUB_PATH

      # - name: Run SonarQube analysis on JAR
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     sonar-scanner \
      #       -Dsonar.projectKey=spring-petclinic \
      #       -Dsonar.java.binaries=build/libs/*.jar \
      #       -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Run Trivy vulnerability scanner
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest \
            --no-progress chosam2/petclinic:${{ github.sha }}

  container-security:
    runs-on: ubuntu-20.04
    needs: build-test-analyze
    steps:
      - name: Run Anchore grype scan
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            anchore/grype:latest \
            chosam2/petclinic:${{ github.sha }}

      - name: Run Clair scan  
        run: |
          docker run --rm \
            -p 5432:5432 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            arminc/clair-db:latest
          docker run --rm \
            --net=host \
            -v /var/run/docker.sock:/var/run/docker.sock \
            containrrr/clairscan \
            chosam2/petclinic:${{ github.sha }}

  zap-scan:
    runs-on: ubuntu-20.04
    needs: build-test-analyze
    steps:
      - name: Run Spring Boot application
        run: |
          docker run -d -p 8080:8080 chosam2/petclinic:${{ github.sha }}
          
      - name: Run OWASP ZAP baseline scan
        run: |
          docker run --rm \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t http://host.docker.internal:8080 \
            -I -j --auto

  deploy:
    runs-on: ubuntu-20.04
    needs: [container-security, zap-scan]
    steps:
      - name: Deploy to production 
        run: |
          # Add deployment steps here
          echo "Deploying Spring Petclinic application to production"

  security-monitoring:
    runs-on: ubuntu-20.04  
    needs: deploy
    steps:
      - name: Run Falco
        run: |  
          docker run --rm \
            --privileged \
            -v /var/run/docker.sock:/host/var/run/docker.sock \
            -v /dev:/host/dev \
            -v /proc:/host/proc:ro \
            -v /boot:/host/boot:ro \
            -v /lib/modules:/host/lib/modules:ro \
            -v /usr:/host/usr:ro \
              falcosecurity/falco
